[
    {
        "id": "mqtt_broker_config",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "node_red_client",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true
    },
    {
        "id": "mqtt_subscribe_all",
        "type": "mqtt in",
        "name": "Subscribe All Drones",
        "topic": "drone/+/+/+",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_config",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 100,
        "wires": [["parse_topic", "debug_mqtt"]]
    },
    {
        "id": "parse_topic",
        "type": "function",
        "name": "Parse MQTT Topic",
        "func": "// MQTT 토픽 파싱\n// Format: drone/DRONE_ID/CATEGORY/SUBCATEGORY\n\nconst topicParts = msg.topic.split('/');\n\nif (topicParts.length >= 3) {\n    msg.drone_id = topicParts[1];\n    msg.category = topicParts[2];\n    msg.subcategory = topicParts[3] || 'general';\n    \n    // 글로벌 컨텍스트에 드론 상태 저장\n    let drones = global.get('drones') || {};\n    \n    if (!drones[msg.drone_id]) {\n        drones[msg.drone_id] = {\n            last_update: new Date(),\n            telemetry: {},\n            mission: {},\n            events: [],\n            status: 'UNKNOWN'\n        };\n    }\n    \n    // 카테고리별 데이터 저장\n    if (msg.category === 'telemetry') {\n        if (msg.subcategory === 'gps') {\n            drones[msg.drone_id].telemetry.gps = msg.payload;\n        } else if (msg.subcategory === 'battery') {\n            drones[msg.drone_id].telemetry.battery = msg.payload;\n        } else if (msg.subcategory === 'all') {\n            drones[msg.drone_id].telemetry = msg.payload;\n            drones[msg.drone_id].status = msg.payload.status;\n        }\n    } else if (msg.category === 'mission') {\n        drones[msg.drone_id].mission = msg.payload;\n    } else if (msg.category === 'events') {\n        // 이벤트는 배열에 추가 (최대 100개 유지)\n        if (!drones[msg.drone_id].events) {\n            drones[msg.drone_id].events = [];\n        }\n        drones[msg.drone_id].events.unshift(msg.payload);\n        if (drones[msg.drone_id].events.length > 100) {\n            drones[msg.drone_id].events.pop();\n        }\n    }\n    \n    drones[msg.drone_id].last_update = new Date();\n    \n    global.set('drones', drones);\n    \n    // 타임스탬프 추가\n    msg.timestamp = new Date().toISOString();\n    \n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [["route_by_category", "save_to_file"]]
    },
    {
        "id": "route_by_category",
        "type": "switch",
        "name": "Route by Category",
        "property": "category",
        "propertyType": "msg",
        "rules": [
            {"t": "eq", "v": "telemetry", "vt": "str"},
            {"t": "eq", "v": "mission", "vt": "str"},
            {"t": "eq", "v": "events", "vt": "str"}
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 100,
        "wires": [
            ["process_telemetry"],
            ["process_mission"],
            ["process_events"]
        ]
    },
    {
        "id": "process_telemetry",
        "type": "function",
        "name": "Process Telemetry",
        "func": "// 텔레메트리 데이터 처리\nconst telemetry = msg.payload;\nconst drone_id = msg.drone_id;\n\n// 배터리 경고 체크\nif (msg.subcategory === 'battery' && telemetry.level < 20) {\n    const alert = {\n        type: 'BATTERY_WARNING',\n        drone_id: drone_id,\n        level: telemetry.level,\n        message: `드론 ${drone_id} 배터리 부족: ${telemetry.level}%`,\n        severity: telemetry.level < 10 ? 'CRITICAL' : 'WARNING',\n        timestamp: new Date().toISOString()\n    };\n    \n    // 알림 메시지 생성\n    node.send([msg, {payload: alert, topic: 'alert'}]);\n} else {\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            ["dashboard_telemetry"],
            ["alert_handler"]
        ]
    },
    {
        "id": "process_mission",
        "type": "function",
        "name": "Process Mission",
        "func": "// 미션 데이터 처리\nconst mission = msg.payload;\n\n// 미션 완료 체크\nif (mission.progress >= 100) {\n    msg.mission_complete = true;\n    msg.notification = `드론 ${msg.drone_id} 미션 완료`;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 120,
        "wires": [["dashboard_mission"]]
    },
    {
        "id": "process_events",
        "type": "function",
        "name": "Process Events",
        "func": "// 이벤트 처리 및 심각도 분류\nconst event = msg.payload;\n\n// 심각도에 따른 처리\nif (event.severity >= 4) {\n    // Critical 이벤트\n    msg.alert_level = 'CRITICAL';\n    msg.color = 'red';\n} else if (event.severity >= 3) {\n    // Warning 이벤트\n    msg.alert_level = 'WARNING';\n    msg.color = 'yellow';\n} else {\n    // Info 이벤트\n    msg.alert_level = 'INFO';\n    msg.color = 'green';\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [["dashboard_events", "alert_handler"]]
    },
    {
        "id": "save_to_file",
        "type": "function",
        "name": "Prepare File Save",
        "func": "// 파일 저장 준비\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, '0');\nconst day = String(now.getDate()).padStart(2, '0');\nconst time = now.toTimeString().split(' ')[0].replace(/:/g, '');\n\n// 파일 경로 생성\nconst basePath = `/drone_data/raw/${year}/${month}/${day}/${msg.drone_id}`;\nconst fileName = `${year}${month}${day}_${time}_${msg.drone_id}_${msg.category.toUpperCase()}_001.json`;\n\nmsg.filepath = `${basePath}/${msg.category}/${fileName}`;\nmsg.filedata = JSON.stringify({\n    metadata: {\n        drone_id: msg.drone_id,\n        category: msg.category,\n        subcategory: msg.subcategory,\n        timestamp: msg.timestamp\n    },\n    data: msg.payload\n}, null, 2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [["file_writer"]]
    },
    {
        "id": "file_writer",
        "type": "file",
        "name": "Write to File",
        "filename": "msg.filepath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 590,
        "y": 240,
        "wires": [[]]
    },
    {
        "id": "dashboard_api",
        "type": "http in",
        "name": "Dashboard API",
        "url": "/api/drones",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 340,
        "wires": [["get_drone_status"]]
    },
    {
        "id": "get_drone_status",
        "type": "function",
        "name": "Get Drone Status",
        "func": "// 모든 드론 상태 반환\nconst drones = global.get('drones') || {};\n\n// 드론 상태 요약\nconst droneStatus = Object.keys(drones).map(droneId => {\n    const drone = drones[droneId];\n    const now = new Date();\n    const lastUpdate = new Date(drone.last_update);\n    const secondsSinceUpdate = (now - lastUpdate) / 1000;\n    \n    return {\n        drone_id: droneId,\n        status: drone.status,\n        is_online: secondsSinceUpdate < 10,\n        last_update: drone.last_update,\n        battery: drone.telemetry.battery?.level || 0,\n        position: drone.telemetry.gps || {},\n        mission_progress: drone.mission.progress || 0,\n        recent_events: drone.events?.slice(0, 5) || []\n    };\n});\n\nmsg.payload = {\n    timestamp: new Date().toISOString(),\n    total_drones: droneStatus.length,\n    online_drones: droneStatus.filter(d => d.is_online).length,\n    drones: droneStatus\n};\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 340,
        "wires": [["http_response"]]
    },
    {
        "id": "http_response",
        "type": "http response",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 560,
        "y": 340,
        "wires": []
    },
    {
        "id": "alert_handler",
        "type": "function",
        "name": "Alert Handler",
        "func": "// 알림 처리\nconst alert = msg.payload;\n\n// 콘솔 출력\nnode.warn(`[ALERT] ${alert.message || alert.event_type}: ${JSON.stringify(alert)}`);\n\n// 알림 저장\nlet alerts = global.get('alerts') || [];\nalerts.unshift({\n    timestamp: new Date().toISOString(),\n    ...alert\n});\n\n// 최대 100개 유지\nif (alerts.length > 100) {\n    alerts = alerts.slice(0, 100);\n}\n\nglobal.set('alerts', alerts);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 240,
        "wires": [[]]
    },
    {
        "id": "periodic_check",
        "type": "inject",
        "name": "Periodic Check (10s)",
        "props": [{"p": "payload"}],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 420,
        "wires": [["check_drone_connection"]]
    },
    {
        "id": "check_drone_connection",
        "type": "function",
        "name": "Check Drone Connection",
        "func": "// 드론 연결 상태 체크\nconst drones = global.get('drones') || {};\nconst now = new Date();\nconst alerts = [];\n\nObject.keys(drones).forEach(droneId => {\n    const drone = drones[droneId];\n    const lastUpdate = new Date(drone.last_update);\n    const secondsSinceUpdate = (now - lastUpdate) / 1000;\n    \n    // 30초 이상 업데이트 없으면 연결 끊김으로 판단\n    if (secondsSinceUpdate > 30 && drone.status !== 'DISCONNECTED') {\n        drone.status = 'DISCONNECTED';\n        alerts.push({\n            payload: {\n                type: 'CONNECTION_LOST',\n                drone_id: droneId,\n                message: `드론 ${droneId} 연결 끊김 (${Math.floor(secondsSinceUpdate)}초)`,\n                severity: 4,\n                last_known_position: drone.telemetry.gps || {}\n            }\n        });\n    }\n});\n\nglobal.set('drones', drones);\n\n// 알림 발송\nif (alerts.length > 0) {\n    return alerts;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 420,
        "wires": [["alert_handler"]]
    },
    {
        "id": "debug_mqtt",
        "type": "debug",
        "name": "Debug MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 40,
        "wires": []
    },
    {
        "id": "dashboard_telemetry",
        "type": "ui_gauge",
        "name": "Battery Gauge",
        "group": "drone_telemetry",
        "order": 1,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "{{msg.drone_id}} Battery",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": ["#ff0000", "#ffff00", "#00ff00"],
        "seg1": 20,
        "seg2": 60,
        "diff": false,
        "className": "",
        "x": 1060,
        "y": 60,
        "wires": []
    },
    {
        "id": "dashboard_mission",
        "type": "ui_chart",
        "name": "Mission Progress",
        "group": "drone_mission",
        "order": 1,
        "width": "6",
        "height": "4",
        "label": "Mission Progress",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Data",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ["#1f77b4", "#aec7e8", "#ff7f0e"],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1060,
        "y": 120,
        "wires": [[]]
    },
    {
        "id": "dashboard_events",
        "type": "ui_text",
        "name": "Event Display",
        "group": "drone_events",
        "order": 1,
        "width": "6",
        "height": "2",
        "label": "Latest Event",
        "format": "{{msg.payload.message}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "",
        "color": "{{msg.color}}",
        "x": 1060,
        "y": 180,
        "wires": []
    }
]